{"version":3,"sources":["context.js","Components/Header/index.jsx","Components/Modal/index.jsx","Components/Score/index.jsx","Components/Tile/index.jsx","Components/Controls/index.jsx","Components/Gamearea/index.jsx","Components/Instructions/index.jsx","Containers/Mobile/index.jsx","Containers/Desktop/index.jsx","App.js","utils/index.jsx","serviceWorker.js","index.js"],"names":["AppContext","createContext","autoSelectedTile","AppState","children","useState","row","col","updateAutoSelectedTile","score","updateScore","gameInProgress","updateGameStart","showModal","updateShowModal","Provider","value","Header","componentClassName","className","Modal","title","message","closeHandler","header","content","onClick","id","Score","useContext","Tile","selectTile","tiles","eachRow","index","push","classVar","updateClassVar","hit","setHit","useEffect","setTimeout","blinkTile","hitTile","console","log","type","split","Number","parseInt","map","tile","key","el","Controls","Gamearea","data","Math","floor","random","Instructions","MobileShell","DesktopShell","AppView","pageView","isMobileDevice","updateMobileDeviceFlag","returnVal","test","navigator","userAgent","checkMobileDevice","Mobile","Desktop","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.821b0838.chunk.js","sourcesContent":["import React, { useState, createContext } from 'react'\n\nexport const AppContext = createContext({\n  autoSelectedTile: {}\n})\n\nexport const AppState = ({ children }) => {\n  /*\n    States used in the context\n  */\n  const [autoSelectedTile, updateAutoSelectedTile] = useState({row: 0, col: 0})\n  const [score, updateScore] = useState(0)\n  const [gameInProgress, updateGameStart] = useState(true)\n  const [showModal, updateShowModal] = useState(false)\n\n  return (\n    <AppContext.Provider\n      value={{\n        autoSelectedTile,\n        updateAutoSelectedTile,\n        score,\n        updateScore,\n        gameInProgress,\n        updateGameStart,\n        showModal,\n        updateShowModal\n      }}\n    >\n      {children}\n    </AppContext.Provider>\n  )\n}","import React from 'react'\nimport './header.css'\n\nconst Header = ({\n  componentClassName\n}) => {\n  return (\n    <header className=\"top-header flex-and-center flex-wrap\" >\n      <div className={componentClassName}>\n        Hit the circle\n      </div>\n      <section className=\"\">\n        Test your skill how many circle can you hit?\n      </section>\n    </header>\n  )\n}\n\nexport default Header","import React from 'react'\n\nconst Modal = ({\n  title,\n  message,\n  closeHandler\n}) => {\n  let header = ''\n  let content = ''\n  if (title) {\n      header = (\n        <div className=\"modal-header\">{title}</div>\n      )\n  }\n  const hideModal = () => {\n    if (closeHandler && typeof closeHandler === 'function') {\n      closeHandler()\n    }\n  }\n  if (message) {\n    content = (\n      <>\n        <span className=\"close-modal\" onClick={hideModal}>X</span>\n        {header}\n        <div className=\"modal-content\">{message}</div>\n      </>\n    )\n  }\n  return (\n    <>\n      <div id=\"overlay\" className=\"overlay black hide\"></div>\n      <div id=\"alert-box\" className=\"alert-box hide\">\n        {content}\n      </div>\n    </>\n  )\n}\n\nexport default Modal","import React, { useContext } from 'react'\nimport Modal from '../Modal'\nimport './score.css'\nimport { AppContext } from '../../context'\n\nconst Score = () => {\n  const { score,\n    showModal,\n    updateScore,\n    // updateGameStart,\n    updateShowModal } = useContext(AppContext)\n  const closeModal = () => {\n    updateShowModal(false)\n    // updateGameStart(true)\n    updateScore(0)\n  }\n\n  return (\n    <>\n      <div className='score-input'>\n        <section className=\"score-box\">\n            <span>Score</span>\n            <div id=\"score\">{score}</div>\n        </section>\n      </div>\n      {showModal && <Modal title=\"Game over\" message={`Your score is ${score}`} closeHandler={closeModal} />}\n    </>\n  )\n}\n\nexport default Score","import React, { useState, useContext, useEffect } from 'react'\nimport { AppContext } from '../../context'\n\nconst Tile = ({\n  selectTile\n}) => {\n  const {\n    autoSelectedTile,\n    score,\n    updateScore\n  } = useContext(AppContext)\n\n  const tiles = []\n  const eachRow = ['','','','','','']\n  for (let index = 0; index < 6; index++) {\n    tiles.push([...eachRow])\n  }\n\n  const [classVar, updateClassVar] = useState()\n  const [hit, setHit] = useState({})\n\n  useEffect(() => {\n    setTimeout(() => {\n      blinkTile('set', `index_${autoSelectedTile.row}_${autoSelectedTile.col}`)\n    }, 1000)\n  }, [autoSelectedTile])\n\n  useEffect(() => {\n    setTimeout(() => {\n      updateClassVar('')\n    }, 200)\n  }, [hit])\n\n  const hitTile = (row, col) => () => {\n    console.log(row, col)\n    if (autoSelectedTile.row === row && autoSelectedTile.col === col) {\n      updateScore(score+1)\n      selectTile(6, 6)\n      blinkTile('hit', `index_${row}_${col}`)\n    } else {\n      updateScore(score-1)\n      blinkTile('miss', `index_${row}_${col}`)\n    }\n  }\n\n  const blinkTile = (type, id) => {\n      if (type === 'hit') {\n        updateClassVar('blink-green')\n      } else if (type === 'miss'){\n        updateClassVar('blink-red')\n      } else {\n        updateClassVar('blink-blue')\n      }\n      const [, row, col] = id.split('_')\n      setHit({\n        row: Number.parseInt(row),\n        col: Number.parseInt(col)\n      })\n  }\n\n  return (\n    tiles.map((tile, row) => (\n      <div className=\"tile-row\" key={`index_${row}`}>\n        {\n          tile.map((el, col) => (\n            <div\n              className={`tile ${hit.row === row && hit.col === col ? classVar: ''}`}\n              key={`index_${row}_${col}`}\n              id={`index_${row}_${col}`}\n              onClick={hitTile(row, col)}\n            />\n          )) \n        }\n      </div>\n    ))\n  )\n}\n\nexport default Tile","import React, { useContext } from 'react'\nimport './controls.css'\nimport { AppContext } from '../../context'\n\nconst Controls = ({\n    selectTile\n}) => {\n    \n  const  { updateGameStart, updateShowModal } = useContext(AppContext)\n  const startGame = () => {\n    updateGameStart(false)\n    selectTile(6, 6)\n  }\n\n  const endGame = () => {\n    updateGameStart(true)\n    updateShowModal(true)\n  }\n\n  return (\n    <>\n      <section className=\"flex-and-center\">\n        <button className=\"button primary-button\" onClick={startGame}>Play</button>\n        <button className=\"button secondary-button\" onClick={endGame}>Stop</button>\n      </section>\n    </>\n  )\n}\n\nexport default Controls","import React, { useContext} from 'react'\nimport Tile from '../Tile'\nimport Controls from '../Controls'\nimport { AppContext } from '../../context'\nimport './game.css'\n\nconst Gamearea = () => {\n  const {\n    autoSelectedTile,\n    updateAutoSelectedTile,\n    gameInProgress\n  } = useContext(AppContext)\n\n  const selectTile = (row, col) => {\n    const data = {}\n    data.row = Math.floor(Math.random() * row)\n    data.col = Math.floor(Math.random() * col)\n    updateAutoSelectedTile(data)\n    console.log(\"Selected Tile : \")\n    console.log(autoSelectedTile)\n  }\n\n  return (\n    <>\n      <section className=\"flex-and-center game-area\">\n        <div id=\"tile-box\" className=\"tile-box\">\n          <div id=\"game-overlay\" className={`overlay ${gameInProgress ? '': 'open'}`}>\n            <div>\n              Please click on 'Play' to start the game\n            </div>\n          </div>\n          <div id=\"game\">\n            <Tile selectTile={selectTile} />\n          </div>\n        </div>\n      </section>\n      <Controls selectTile={selectTile} />\n    </>\n  )\n}\n\nexport default Gamearea","import React from 'react'\nimport './instructions.css'\n\nconst Instructions = ({\n  componentClassName\n}) => {\n  return (\n    <section className=\"flex-and-center\">\n      <ul className=\"instruction\">\n        <div>Instruction</div>\n        <li>Click on the circle as they are selected randomly by the computer</li>\n        <li>1 point per hit, minus 1 per miss</li>\n      </ul>\n    </section>\n  )\n}\n\nexport default Instructions","import React from 'react'\nimport Header from '../../Components/Header'\nimport Score from '../../Components/Score'\nimport Gamearea from '../../Components/Gamearea'\nimport Instructions from '../../Components/Instructions'\nimport './mobile.css'\n\nconst MobileShell = () => {\n  return (\n    <div className=\"mobile-shell\">\n      <Header componentClassName=\"align-center page-title\" />\n      <Score />\n      <Gamearea />\n      <Instructions />\n    </div>\n  )\n}\n\nexport default MobileShell","import React from 'react'\nimport Header from '../../Components/Header'\nimport Score from '../../Components/Score'\nimport Gamearea from '../../Components/Gamearea'\nimport Instructions from '../../Components/Instructions'\nimport './desktop.css'\n\nconst DesktopShell = () => {\n  return (\n    <div className=\"desktop-shell\">\n      <Header componentClassName=\"page-title\" />\n      <Score />\n      <Gamearea />\n      <Instructions />\n    </div>\n  )\n}\n\nexport default DesktopShell","import React, {\n  useEffect,\n  useState,\n  // useContext\n} from 'react'\nimport {\n  checkMobileDevice\n} from './utils'\nimport {\n  AppState,\n  // AppContext\n} from './context'\nimport MobileShell from './Containers/Mobile'\nimport DesktopShell from './Containers/Desktop'\nimport './App.css'\n\nconst AppView = () => {\n  const [isMobileDevice, updateMobileDeviceFlag] = useState(false)\n  // const {\n  //   fetchSearchResults,\n  //   pageData\n  // } = useContext(AppContext)\n\n  useEffect(() => {\n    updateMobileDeviceFlag(checkMobileDevice())\n  }, [])\n\n  let pageView\n  if (isMobileDevice) {\n    pageView = (\n      <>\n        <MobileShell />\n      </>\n    )\n  } else {\n    pageView = (\n      <>\n        <DesktopShell />\n      </>\n    )\n  }\n\n  return (\n    <div className=\"App\">\n      {pageView}\n    </div>\n  )\n}\n\nconst App = () => (\n  <AppState>\n    <AppView />\n  </AppState>\n)\n\nexport default App\n","import Axios from 'axios'\n/*\n\n*/\nexport const appAxiosInstance = (axiosUrl, method, data, headers) => {\n  let instance\n  const config = {\n    timeout: 120000,\n    headers\n  }\n  if (method.toLowerCase() === 'get') {\n    instance = Axios.get(axiosUrl, {\n      params: data,\n      headers: config.headers\n    })\n  } else if (method.toLowerCase() === 'post') {\n    instance = Axios.post(axiosUrl, data, config)\n  }\n  return instance\n}\n\n\n/*\n  Checks useragent of the browser used to determine\n  whether its a mobile device or desktop\n*/\nexport const checkMobileDevice = () => {\n  let returnVal = false\n  if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|Mobile|mobile/i.test(navigator.userAgent)) {\n    returnVal = true\n  }\n  return returnVal\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}