{"version":3,"sources":["context.js","Components/Controls/index.jsx","Components/Tile/index.jsx","Components/Gameboard/index.jsx","Components/GameStartModal/index.jsx","Components/TurnIndicator/index.jsx","Components/Modal/index.jsx","Components/Header/index.jsx","Containers/AppShell/index.jsx","App.js","serviceWorker.js","index.js"],"names":["AppContext","createContext","autoSelectedTile","AppState","children","useState","showModal","updateShowModal","playerOne","updatePlayerOne","playerTwo","updatePlayerTwo","gridSize","updateGridSize","playerUp","setPlayerUp","tileArr","updateTileArr","gameOver","setGameOver","startGame","size","eachRow","index","push","value","startArr","Provider","resetGame","restartGame","Controls","useContext","className","onClick","Tile","tile","row","col","updateTileValue","newTile","Gameboard","winner","setWinner","useEffect","val","updatedArr","verifyMove","arr","verticalCount","horizontalCount","leftDiagonalCount","rightDiagonalCount","map","tileRow","key","eachTile","GameStartModal","playerOneName","updatePlayerOneName","playerTwoName","updatePlayerTwoName","grid","updateGrid","htmlFor","type","onChange","e","currentTarget","Number","parseInt","TurnIndicator","playerNext","Modal","title","modalContent","closeHandler","id","Header","componentClassName","AppShell","AppView","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.96d2a71e.chunk.js","sourcesContent":["import React, { useState, createContext } from 'react'\n\nexport const AppContext = createContext({\n  autoSelectedTile: {}\n})\n\nexport const AppState = ({ children }) => {\n  /*\n    States used in the context\n  */\n\n  const [showModal, updateShowModal] = useState(true)\n  const [playerOne, updatePlayerOne] = useState('')\n  const [playerTwo, updatePlayerTwo] = useState('')\n  const [gridSize, updateGridSize] = useState(3)\n  // Assumption that 1 indicates player 1 and 2 indicates player 2\n  const [playerUp, setPlayerUp] = useState(1)\n\n  const resetGame = () => {\n    updateShowModal(true)\n    updateGridSize('')\n    updatePlayerTwo('')\n    updatePlayerOne('')\n    setPlayerUp(1)\n    setGameOver(false)\n  }\n\n  const restartGame = () => {\n    setPlayerUp(1)\n    updatePlayerTwo(playerOne)\n    updatePlayerOne(playerTwo)\n    setGameOver(false)\n    startGame(gridSize)\n  }\n\n  const [tileArr, updateTileArr] = useState([])\n  const [gameOver, setGameOver] = useState(false)\n\n  const startGame = size => {\n    let eachRow = []\n    for (let index = 0; index < size; index++) {\n        eachRow.push({\n            value: ''\n        })\n    }\n    let startArr = []\n    for (let index = 0; index < size; index++) {\n      startArr.push([...eachRow])\n    }\n    updateTileArr([...startArr])\n  }\n\n  return (\n    <AppContext.Provider\n      value={{\n        showModal,\n        updateShowModal,\n        playerTwo,\n        updatePlayerTwo,\n        playerOne,\n        updatePlayerOne,\n        gridSize,\n        updateGridSize,\n        playerUp,\n        setPlayerUp,\n        resetGame,\n        tileArr,\n        updateTileArr,\n        startGame,\n        gameOver,\n        setGameOver,\n        restartGame\n      }}\n    >\n      {children}\n    </AppContext.Provider>\n  )\n}","import React, { useContext } from 'react'\nimport './controls.css'\nimport { AppContext } from '../../context'\n\nconst Controls = () => {\n    \n  const  {\n      resetGame,\n      restartGame\n    } = useContext(AppContext)\n\n  return (\n    <>\n      <section className=\"flex-and-center controls\">\n        <button className=\"button primary-button restart\" onClick={restartGame}>Restart</button>\n        <button className=\"button primary-button restart\" onClick={resetGame}>New Game</button>\n      </section>\n    </>\n  )\n}\n\nexport default Controls","import React, { useContext } from 'react'\nimport './tile.css'\nimport { AppContext } from '../../context'\n\nconst Tile = ({ tile, row, col, updateTileValue }) => {\n    const {\n        playerUp,\n        setPlayerUp\n    } = useContext(AppContext)\n\n    const makeMove = () => {\n        let newTile = tile.value\n        if (playerUp === 1 && !tile.value) {\n            newTile = 'X'\n            setPlayerUp(2)\n        } else if (playerUp === 2 && !tile.value) {\n            newTile  =  'O'\n            setPlayerUp(1)\n        }\n        updateTileValue(newTile, row, col)\n    }\n\n    const { value } = tile\n\n    return (\n        <div\n            className={`tile flex-and-center ${value === 'X' ? 'p1-marker' : ''} ${value === 'O' ? 'p2-marker' : ''}`}\n            onClick={makeMove}\n        >\n            {value}\n        </div>\n    )\n}\n\nexport default Tile","import React, { useContext, useState, useEffect } from 'react'\nimport Controls from '../Controls'\nimport Tile from '../Tile'\nimport './gameboard.css'\nimport { AppContext } from '../../context'\n\nconst Gameboard = () => {\n    const {\n        startGame,\n        tileArr,\n        gridSize,\n        updateTileArr,\n        gameOver,\n        setGameOver,\n        playerOne,\n        playerTwo\n    } = useContext(AppContext)\n    \n    const [winner, setWinner] = useState('')\n    useEffect(() => {\n        startGame(gridSize)\n    }, [gridSize])\n\n    const updateTileValue = (val, row, col) => {\n        const updatedArr = [...tileArr]\n        updatedArr[row][col] = {\n            value: val\n        }\n        verifyMove(updatedArr, val, row, col)\n        updateTileArr(updatedArr)\n    }\n\n    const verifyMove = (arr, val, row, col) => {\n        // for straightPaths\n        let verticalCount = 0\n        for (let index = 0; index < gridSize; index++) {\n            if (arr[index][col].value === val) {\n                verticalCount += 1\n            }\n        }\n\n        let horizontalCount = 0\n        for (let index = 0; index < gridSize; index++) {\n            if (arr[row][index].value === val) {\n                horizontalCount += 1\n            }\n        }\n\n        let leftDiagonalCount = 0\n        if (row === col) {\n            for (let index = 0; index < gridSize; index++) {\n                if (arr[index][index].value === val) {\n                    leftDiagonalCount += 1\n                }\n            }\n        }\n\n        let rightDiagonalCount = 0\n        if (gridSize - row - 1 === col) {\n            for (let index = 0; index < gridSize; index++) {\n                if (arr[index][gridSize - 1 - index].value === val) {\n                    rightDiagonalCount += 1\n                }\n            }\n        }\n\n        if (verticalCount === gridSize ||\n            horizontalCount === gridSize ||\n            leftDiagonalCount === gridSize ||\n            rightDiagonalCount === gridSize) {\n                setGameOver(true)\n                setWinner(val === 'X' ? playerOne : playerTwo)\n        }\n    }\n\n    return (\n        <>\n            <div className=\"game-area\">\n                <div className={`overlay ${gameOver ? '': 'open'}`}>\n                    <div>\n                        {winner} has won the game\n                    </div>\n                </div>\n                {\n                    tileArr.map((tileRow, row) => (\n                    <div className=\"flex-and-center\" key={`index_${row}`}>\n                        {\n                            tileRow.map((eachTile, col) => (\n                                <Tile\n                                    key={`index_${row}_${col}`}\n                                    tile={eachTile}\n                                    row={row}\n                                    col={col}\n                                    updateTileValue={updateTileValue}\n                                />\n                            ))\n                        }\n                    </div>  \n                    ))\n                }\n            </div>\n            <Controls />\n        </>\n    )\n}\n\nexport default Gameboard","import React, { useContext, useState } from 'react'\nimport { AppContext } from '../../context'\nimport './gameStartModal.css'\n\nconst GameStartModal = () => {\n    const {\n        updatePlayerOne,\n        updatePlayerTwo,\n        updateShowModal,\n        updateGridSize\n    } = useContext(AppContext)\n\n    const [playerOneName, updatePlayerOneName] = useState('')\n    const [playerTwoName, updatePlayerTwoName] = useState('')\n    const [grid, updateGrid] = useState('')\n\n    const setPlayerName = () => {\n        if (playerOneName &&\n            playerTwoName &&\n            grid &&\n            typeof Number.parseInt(grid) === 'number' &&\n            Number.parseInt(grid) >= 3) {\n            updatePlayerOne(playerOneName)\n            updatePlayerTwo(playerTwoName)\n            updateShowModal(false)\n            updateGridSize(Number.parseInt(grid))\n        }\n    }\n\n    return (\n        <>\n            <div className=\"flex-and-center flex-wrap\">\n                <div className=\"inputs\">\n                    <label htmlFor=\"\"> Player 1:  </label>\n                    <input type=\"text\" value={playerOneName} onChange={e => updatePlayerOneName(e.currentTarget.value)} />\n                </div>\n                \n                <div className=\"inputs\">\n                    <label htmlFor=\"\"> Player 2:  </label>\n                    <input type=\"text\" value={playerTwoName} onChange={e => updatePlayerTwoName(e.currentTarget.value)} />\n                </div>\n            \n                <div className=\"inputs\">\n                    <label htmlFor=\"\"> Grid size:  </label>\n                    <input type=\"text\" value={grid} onChange={e => updateGrid(e.currentTarget.value)} />\n                </div>\n            </div>\n            <div className=\"flex-and-center\">\n                <button className=\"button primary-button\" onClick={setPlayerName}>\n                    Play\n                </button>\n            </div>\n        </>\n    )\n}\n\nexport default GameStartModal","import React from 'react'\nimport './turnIndicator.css'\n\nconst TurnIndicator = ({ playerOne, playerTwo, playerNext }) => {\n    return (\n        <div className=\"flex-and-center flex-wrap display\">\n            <div className=\"player-names\">\n                Player 1: {playerOne}\n            </div>\n            <div className=\"player-names\">\n                Player 2: {playerTwo}\n            </div>\n            <div className=\"next-move\">\n                Up Next: {playerNext === 1 ? playerOne : playerTwo}\n            </div>\n        </div>\n    )\n}\n\nexport default TurnIndicator","import React from 'react'\n\nconst Modal = ({\n  title,\n  modalContent,\n  closeHandler\n}) => {\n\n  return (\n    <>\n      <div id=\"overlay\" className=\"overlay black hide\"></div>\n      <div id=\"alert-box\" className=\"alert-box hide\">\n        {modalContent &&\n            <>\n                {title && <div className=\"modal-header\">{title}</div>}\n                <div className=\"modal-content\">{modalContent}</div>\n            </>}\n      </div>\n    </>\n  )\n}\n\nexport default Modal","import React from 'react'\nimport './header.css'\n\nconst Header = ({\n  componentClassName\n}) => {\n  return (\n    <header className=\"top-header flex-and-center flex-wrap\" >\n      <div className=\"page-title\">\n        Tic Tac Toe\n      </div>\n      <section className=\"\">\n        Win a friend or make a foe...\n      </section>\n    </header>\n  )\n}\n\nexport default Header","import React, { useContext } from 'react'\nimport Gameboard from '../../Components/Gameboard'\nimport GameStartModal from '../../Components/GameStartModal'\nimport TurnIndicator from '../../Components/TurnIndicator'\nimport Modal from '../../Components/Modal'\nimport Header from '../../Components/Header'\nimport { AppContext } from '../../context'\n\nconst AppShell = () => {\n    const {\n        showModal,\n        updateShowModal,\n        updateGridSize,\n        gridSize,\n        playerUp,\n        playerOne,\n        playerTwo\n    } = useContext(AppContext)\n\n    const closeModal = () => {\n        updateShowModal(false)\n        updateGridSize(Number.parseInt(gridSize))\n    }\n\n    return (\n        <>  \n            <Header />\n            <TurnIndicator playerOne={playerOne} playerTwo={playerTwo} playerNext={playerUp} />\n            <Gameboard />\n            {showModal && <Modal\n                title=\"Input player names\"\n                modalContent={<GameStartModal />}\n                closeHandler={closeModal}\n            />}\n        </>\n    )\n}\n\nexport default AppShell","import React, {\n  // useEffect\n} from 'react'\n\nimport {\n  AppState,\n  // AppContext\n} from './context'\nimport AppShell from './Containers/AppShell'\nimport './App.css'\n\nconst AppView = () => {\n  return (\n    <div className=\"App\">\n      <AppShell />\n    </div>\n  )\n}\n\nconst App = () => (\n  <AppState>\n    <AppView />\n  </AppState>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}